require "rails_helper"

RSpec.describe "<%= class_name %>", type: :request do
  let(:valid_attributes) { attributes_for(:<%= singular_table_name %>) }

  describe "GET /<%= plural_name %>" do
    let(:<%= options['father'].downcase.singularize %>) { create(:<%= options['father'].downcase.singularize %>) }
    let(:<%= singular_table_name %>) { create(:<%=singular_table_name %>, <%= options['father'].downcase %>: <%= options['father'].downcase %>) }

    it "renders a successful response" do
      get "<%= spec_routes[:index] %>"
      expect(response).to be_successful
    end
  end


   describe "GET /<%= singular_name %>" do
     let(:<%= options['father'].downcase.singularize %>) { create(:<%= options['father'].downcase.singularize %>) }
     let(:<%= singular_table_name %>) { create(:<%=singular_table_name %>, <%= options['father'].downcase.singularize %>: <%= options['father'].downcase %>)}

     it "gets an <%= singular_name %>" do
       get "<%= spec_routes[:show] %>"
       expect(response).to be_successful
     end
   end


  describe "POST /<%= plural_name %>" do
    context "with valid parameters" do
      let(:<%= options['father'].downcase.singularize %>) { create(:<%= options['father'].downcase.singularize %>) }
      it "creates a new <%= singular_name %>" do
        expect do
          post "<%= spec_routes[:create] %>",
               params: { <%= singular_name %>: valid_attributes }
        end.to change(<%= class_name %>, :count).by(1)
      end
    end
  end

  describe "PATCH /<%= plural_name %>" do
    let(:<%= options['father'].downcase.singularize %>) { create(:<%= options['father'].downcase.singularize %>) }
    let(:<%= singular_table_name %>) { create(:<%=singular_table_name %>, <%= options['father'].downcase.singularize %>: <%= options['father'].downcase.singularize %>)}

    it "updates an <%= singular_name %>" do
        patch "<%= spec_routes[:update] %>",
            params: { <%= singular_name %>: valid_attributes }
        expect(response).to have_http_status(:success)
    end
  end

  describe "DELETE /<%= singular_name %>" do
    let(:<%= options['father'].downcase.singularize %>) { create(:<%= options['father'].downcase.singularize %>) }

    it "deletes an <%= singular_name %>" do
      <%= singular_table_name %> = create(:<%=singular_table_name %>, <%= options['father'].downcase.singularize %>: <%= options['father'].downcase.singularize %>)
      expect do
        delete "<%= spec_routes[:delete] %>"
      end.to change(<%= class_name %>, :count).by(-1)
    end
  end

end
